package main

import (
	"context"
	"errors"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/brianvoe/gofakeit/v7"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/google/uuid"
	ht "github.com/ogen-go/ogen/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	orderV1 "github.com/nkolesnikov999/micro2-OK/shared/pkg/openapi/order/v1"
	inventoryV1 "github.com/nkolesnikov999/micro2-OK/shared/pkg/proto/inventory/v1"
	paymentV1 "github.com/nkolesnikov999/micro2-OK/shared/pkg/proto/payment/v1"
)

const (
	httpPort = "8080"
	// –∞–¥—Ä–µ—Å inventory gRPC‚Äë—Å–µ—Ä–≤–µ—Ä–∞
	inventoryAddr = "localhost:50051"
	paymentAddr   = "localhost:50050"
	// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	readHeaderTimeout = 5 * time.Second
	shutdownTimeout   = 10 * time.Second
)

// orderStorage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
type orderStorage struct {
	mu     sync.RWMutex
	orders map[string]*orderV1.OrderDto
}

// NeworderStorage —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
func NewOrderStorage() *orderStorage {
	return &orderStorage{
		orders: make(map[string]*orderV1.OrderDto),
	}
}

func (s *orderStorage) SaveOrder(order *orderV1.OrderDto) error {
	s.mu.Lock()
	defer s.mu.Unlock()
	s.orders[order.OrderUUID.String()] = order
	return nil
}

// GetOrder –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ uuid
func (s *orderStorage) GetOrder(uuid string) *orderV1.OrderDto {
	s.mu.RLock()
	defer s.mu.RUnlock()

	order, ok := s.orders[uuid]
	if !ok {
		return nil
	}

	return order
}

// OrderHandler —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å orderV1.Handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∑–∞–∫–∞–∑–∞—Ö
type OrderHandler struct {
	storage *orderStorage
}

// NewOrderHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∑–∞–∫–∞–∑–∞—Ö
func NewOrderHandler(storage *orderStorage) *OrderHandler {
	return &OrderHandler{
		storage: storage,
	}
}

func (h *OrderHandler) CancelOrder(ctx context.Context, params orderV1.CancelOrderParams) (orderV1.CancelOrderRes, error) {
	return nil, ht.ErrNotImplemented
}

func (h *OrderHandler) CreateOrder(ctx context.Context, req *orderV1.CreateOrderRequest) (orderV1.CreateOrderRes, error) {
	if req == nil {
		return &orderV1.BadRequestError{Code: http.StatusBadRequest, Message: "empty request"}, nil
	}
	if len(req.PartUuids) == 0 {
		return &orderV1.BadRequestError{Code: http.StatusBadRequest, Message: "part_uuids must not be empty"}, nil
	}

	// Build filter for inventory service by requested UUIDs
	uuids := make([]string, 0, len(req.PartUuids))
	for _, id := range req.PartUuids {
		uuids = append(uuids, id.String())
	}

	resp, err := callInventoryListParts(ctx, inventoryAddr, uuids)
	if err != nil {
		return &orderV1.ServiceUnavailableError{Code: http.StatusServiceUnavailable, Message: err.Error()}, nil
	}

	// Ensure all requested parts exist
	found := make(map[string]struct{}, len(resp.GetParts()))
	var total float64
	for _, p := range resp.GetParts() {
		found[p.GetUuid()] = struct{}{}
		total += p.GetPrice()
	}
	missing := make([]string, 0)
	for _, id := range uuids {
		if _, ok := found[id]; !ok {
			missing = append(missing, id)
		}
	}
	if len(missing) > 0 {
		return &orderV1.NotFoundError{Code: http.StatusNotFound, Message: "one or more parts not found"}, nil
	}

	orderID := uuid.New()
	order := &orderV1.OrderDto{
		OrderUUID:  orderID,
		UserUUID:   req.UserUUID,
		PartUuids:  req.PartUuids,
		TotalPrice: float32(total),
		Status:     orderV1.OrderStatusPENDINGPAYMENT,
	}
	if err := h.storage.SaveOrder(order); err != nil {
		return &orderV1.InternalServerError{Code: http.StatusInternalServerError, Message: err.Error()}, nil
	}

	return &orderV1.CreateOrderResponse{
		OrderUUID:  orderID,
		TotalPrice: float32(total),
	}, nil
}

// callInventoryListParts —Å–æ–∑–¥–∞–µ—Ç gRPC‚Äë–∫–ª–∏–µ–Ω—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç ListParts –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
func callInventoryListParts(ctx context.Context, addr string, uuids []string) (*inventoryV1.ListPartsResponse, error) {
	conn, err := grpc.NewClient(
		addr,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("failed to connect: %v\n", err)
		return nil, err
	}
	defer func() {
		if cerr := conn.Close(); cerr != nil {
			log.Printf("failed to close connect: %v", cerr)
		}
	}()

	client := inventoryV1.NewInventoryServiceClient(conn)
	return client.ListParts(ctx, &inventoryV1.ListPartsRequest{
		Filter: &inventoryV1.PartsFilter{Uuids: uuids},
	})
}

func randomPaymentMethod() paymentV1.PaymentMethod {
	// Values from proto: 0=UNSPECIFIED, 1=CARD, 2=SBP, 3=CREDIT_CARD, 4=INVESTOR_MONEY
	vals := []paymentV1.PaymentMethod{
		paymentV1.PaymentMethod_PAYMENT_METHOD_UNSPECIFIED,
		paymentV1.PaymentMethod_PAYMENT_METHOD_CARD,
		paymentV1.PaymentMethod_PAYMENT_METHOD_SBP,
		paymentV1.PaymentMethod_PAYMENT_METHOD_CREDIT_CARD,
		paymentV1.PaymentMethod_PAYMENT_METHOD_INVESTOR_MONEY,
	}
	return vals[gofakeit.IntRange(0, len(vals)-1)]
}

func callPaymentService(ctx context.Context, addr string, order *orderV1.OrderDto, paymentMethod paymentV1.PaymentMethod) (*paymentV1.PayOrderResponse, error) {
	conn, err := grpc.NewClient(
		addr,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("failed to connect: %v\n", err)
		return nil, err
	}
	defer func() {
		if cerr := conn.Close(); cerr != nil {
			log.Printf("failed to close connect: %v", cerr)
		}
	}()

	client := paymentV1.NewPaymentServiceClient(conn)
	return client.PayOrder(ctx, &paymentV1.PayOrderRequest{
		OrderUuid:     order.OrderUUID.String(),
		UserUuid:      order.UserUUID.String(),
		PaymentMethod: paymentMethod,
	})
}

func (h *OrderHandler) GetOrderByUuid(ctx context.Context, params orderV1.GetOrderByUuidParams) (orderV1.GetOrderByUuidRes, error) {
	order := h.storage.GetOrder(params.OrderUUID.String())
	if order == nil {
		return &orderV1.NotFoundError{Code: http.StatusNotFound, Message: "order not found"}, nil
	}
	return order, nil
}

func (h *OrderHandler) PayOrder(ctx context.Context, req *orderV1.PayOrderRequest, params orderV1.PayOrderParams) (orderV1.PayOrderRes, error) {
	order := h.storage.GetOrder(params.OrderUUID.String())
	if order == nil {
		return &orderV1.NotFoundError{Code: http.StatusNotFound, Message: "order not found"}, nil
	}
	paymentMethod := randomPaymentMethod()
	paymentResp, err := callPaymentService(ctx, paymentAddr, order, paymentMethod)
	if err != nil {
		return &orderV1.InternalServerError{Code: http.StatusInternalServerError, Message: err.Error()}, nil
	}
	order.Status = orderV1.OrderStatusPAID
	order.TransactionUUID = orderV1.NewOptNilString(paymentResp.TransactionUuid)
	order.PaymentMethod = orderV1.NewOptPaymentMethod(convertPaymentMethod(paymentMethod))
	if err := h.storage.SaveOrder(order); err != nil {
		return &orderV1.InternalServerError{Code: http.StatusInternalServerError, Message: err.Error()}, nil
	}
	return &orderV1.PayOrderResponse{
		TransactionUUID: paymentResp.TransactionUuid,
	}, nil
}

// convertPaymentMethod maps payment service enum to OpenAPI enum.
func convertPaymentMethod(pm paymentV1.PaymentMethod) orderV1.PaymentMethod {
	switch pm {
	case paymentV1.PaymentMethod_PAYMENT_METHOD_CARD:
		return orderV1.PaymentMethodPAYMENTMETHODCARD
	case paymentV1.PaymentMethod_PAYMENT_METHOD_SBP:
		return orderV1.PaymentMethodPAYMENTMETHODSBP
	case paymentV1.PaymentMethod_PAYMENT_METHOD_CREDIT_CARD:
		return orderV1.PaymentMethodPAYMENTMETHODCREDITCARD
	case paymentV1.PaymentMethod_PAYMENT_METHOD_INVESTOR_MONEY:
		return orderV1.PaymentMethodPAYMENTMETHODINVESTORMONEY
	case paymentV1.PaymentMethod_PAYMENT_METHOD_UNSPECIFIED:
		fallthrough
	default:
		return orderV1.PaymentMethodPAYMENTMETHODUNKNOWN
	}
}

func (h *OrderHandler) NewError(ctx context.Context, err error) *orderV1.GenericErrorStatusCode {
	return &orderV1.GenericErrorStatusCode{
		StatusCode: http.StatusInternalServerError,
		Response: orderV1.GenericError{
			Code:    orderV1.NewOptInt(http.StatusInternalServerError),
			Message: orderV1.NewOptString(err.Error()),
		},
	}
}

func main() {
	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
	storage := NewOrderStorage()

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∑–∞–∫–∞–∑–∞—Ö
	orderHandler := NewOrderHandler(storage)

	// –°–æ–∑–¥–∞–µ–º OpenAPI —Å–µ—Ä–≤–µ—Ä
	orderServer, err := orderV1.NewServer(
		orderHandler,
		orderV1.WithPathPrefix("/api/v1"),
	)
	if err != nil {
		log.Fatalf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ OpenAPI: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä Chi
	r := chi.NewRouter()

	// –î–æ–±–∞–≤–ª—è–µ–º middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Timeout(10 * time.Second))

	// –ú–æ–Ω—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ OpenAPI
	r.Mount("/", orderServer)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
	server := &http.Server{
		Addr:              net.JoinHostPort("localhost", httpPort),
		Handler:           r,
		ReadHeaderTimeout: readHeaderTimeout, // –ó–∞—â–∏—Ç–∞ –æ—Ç Slowloris –∞—Ç–∞–∫ - —Ç–∏–ø DDoS-–∞—Ç–∞–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π
		// –∞—Ç–∞–∫—É—é—â–∏–π —É–º—ã—à–ª–µ–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏, —É–¥–µ—Ä–∂–∏–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∏—Å—Ç–æ—â–∞—è
		// –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ReadHeaderTimeout –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
		// –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("üöÄ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s\n", httpPort)
		err = server.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
	ctx, cancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer cancel()

	err = server.Shutdown(ctx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
	}

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
